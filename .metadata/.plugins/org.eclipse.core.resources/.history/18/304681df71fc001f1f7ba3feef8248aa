/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <string.h>

#define __vo volatile

typedef struct
{
	__vo uint32_t CONTROL;
	__vo uint32_t BASEPRI;
	__vo uint32_t FAULTMASK;
	__vo uint32_t PRIMASK;
	__vo uint32_t R4;
	__vo uint32_t R5;
	__vo uint32_t R6;
	__vo uint32_t R7;
	__vo uint32_t R8;
	__vo uint32_t R9;
	__vo uint32_t R10;
	__vo uint32_t R11;
	__vo uint32_t SP;
	// stored on the stack by hardware START
	__vo uint32_t R0;
	__vo uint32_t R1;
	__vo uint32_t R2;
	__vo uint32_t R3;
	__vo uint32_t R12;
	__vo uint32_t LR;
	__vo uint32_t PC;
	__vo uint32_t xPSR;
    // stored on the stack by hardware END
} CPU_Dump_t;

CPU_Dump_t* CPU_Bump;

__attribute__((naked)) void HardFault_Handler()
{

	__asm__ volatile (
					  "mov r0, SP           \n\t"
			          "add r0, 32           \n\t"  // previous push (8*4=32)
			          "push {r0}            \n\t"  //push {SP} before entering handler
					  "push {r4-r11}        \n\t"
			          "mrs r0, CONTROL      \n\t"
			          "mrs r1, BASEPRI 		\n\t"
			          "mrs r2, FAULTMASK 	\n\t"
			          "mrs r3, PRIMASK 		\n\t"
					  "push {r0-r3} 		\n\t"
					  "mov r0, SP 			\n\t"
					  "mov %0, r0" 				 : "=r" (CPU_Bump) );
	while(1);
}

int main(void)
{

	float test_float = 13.4;
	test_float = test_float /0; // <- try to call HardFault_Handler()

    /* Loop forever */
	for(;;);
}
