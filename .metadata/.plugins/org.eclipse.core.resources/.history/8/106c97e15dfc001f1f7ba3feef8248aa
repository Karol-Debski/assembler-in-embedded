/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <string.h>

typedef struct
{
	uint32_t R12;
	uint32_t R11;
	uint32_t R10;
	uint32_t R9;
	uint32_t R8;
	uint32_t R7;
	uint32_t R6;
	uint32_t R5;
	uint32_t R4;
	uint32_t R3;
	uint32_t R2;
	uint32_t R1;
	uint32_t R0;
	uint32_t SP;
	uint32_t PC;
	uint32_t CONTROL;
	uint32_t BASEPRI;
	uint32_t FAULTMASK;
	uint32_t PRIMASK;
	uint32_t PSR;
	uint32_t LR;
} CPU_Dump_t;

CPU_Dump_t* CPU_Bump;

void HardFault_Handler()
{

	__asm__ volatile ("push {r0-r12} \n\t"
				      "mov r0, SP \n\t"
			          "add r0, 52 \n\t"
			          "push {r0} \n\t"
			          "mov r0, PC \n\t"
					  "push {r0} \n\t"
			          "mov r0, CONTROL"
			          "mov r1, BASEPRI"
			          "mov r2, FAULTMASK"
			          "mov r3, PRIMASK"
			          "mov r4, PSR"
					  "push {r0-r4, LR} \n\t"
					  "mov r0, SP \n\t"
					  "add r0, 4 \n\t"
					  "mov %0, r0" : "=r" (CPU_Bump) );
	while(1);
}

int main(void)
{

	float val1 = 13.4;
	val1 = val1 /0;

    /* Loop forever */
	for(;;);
}
