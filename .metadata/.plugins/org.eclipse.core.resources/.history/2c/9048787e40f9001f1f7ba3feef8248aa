/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <string.h>


//disable_interrupts_asm:
// cpsid i
// bx lr
//
//enable_interrupts_asm:
// cpsie i
// bx lr

typedef enum
{
	IT_Control_Disable_IT_And_Configurable_Fault_Handlers = 0,
	IT_Control_Disable_IT_And_All_Fault_Handlers,
	IT_Control_Enable_IT_And_Configurable_Fault_Handlers,
	IT_Control_Enable_IT_And_All_Fault_Handlers,
} IT_Control;

void iterrupt_control(IT_Control it_control)
{
	switch (it_control) {
		case IT_Control_Disable_IT_And_Configurable_Fault_Handlers:
			__asm__ volatile ("cpsid i");
			break;
		case IT_Control_Disable_IT_And_All_Fault_Handlers:
			__asm__ volatile ("cpsid f");
			break;
		case IT_Control_Enable_IT_And_Configurable_Fault_Handlers:
			__asm__ volatile ("cpsie i");
			break;
		case IT_Control_Enable_IT_And_All_Fault_Handlers:
			__asm__ volatile ("cpsie f");
			break;
		default:
			break;
	}
}



uint32_t data1 = 0xFFFF;
uint32_t data2 = 0xABCDEF12;
uint32_t data3 = 0x7;

uint32_t temp = 0;

int main(void)
{
	temp = clz_inline(data1);
	temp = rev_inline(data2);
	temp = rbit_inline(data3);

    /* Loop forever */
	for(;;);
}
