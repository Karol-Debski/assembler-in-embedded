
asm-with-c-memcpy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000128  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002b0  080002b0  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002b0  080002b0  00002040  2**0
                  CONTENTS
  4 .ARM          00000000  080002b0  080002b0  00002040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002b0  080002b0  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002b4  080002b4  000012b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  080002b8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002040  2**0
                  CONTENTS
 10 .bss          0000001c  20000040  20000040  00002040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000005c  2000005c  00002040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000c8  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000075  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000054  00000000  00000000  000021ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  00002201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000091  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000054  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000298 	.word	0x08000298

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08000298 	.word	0x08000298

080001c8 <main>:
.text

main:

 //dst
 movw r0, :lower16:tab1
 80001c8:	f240 0000 	movw	r0, #0
 movt r0, :upper16:tab1
 80001cc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 //src
 movw r1, :lower16:tab2
 80001d0:	f240 0120 	movw	r1, #32
 movt r1, :upper16:tab2
 80001d4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 //size in bytes
 mov r2, 8*4
 80001d8:	f04f 0220 	mov.w	r2, #32


 bl memcpy
 80001dc:	f000 f84e 	bl	800027c <memcpy>

080001e0 <loop>:

loop:
 b loop
 80001e0:	e7fe      	b.n	80001e0 <loop>
	...

080001e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001e4:	f8df d030 	ldr.w	sp, [pc, #48]	@ 8000218 <LoopFillZerobss+0xe>
  

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80001e8:	480c      	ldr	r0, [pc, #48]	@ (800021c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80001ea:	490d      	ldr	r1, [pc, #52]	@ (8000220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80001ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80001ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001f0:	e002      	b.n	80001f8 <LoopCopyDataInit>

080001f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001f6:	3304      	adds	r3, #4

080001f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001fc:	d3f9      	bcc.n	80001f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000200:	4c0a      	ldr	r4, [pc, #40]	@ (800022c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000204:	e001      	b.n	800020a <LoopFillZerobss>

08000206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000208:	3204      	adds	r2, #4

0800020a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800020a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800020c:	d3fb      	bcc.n	8000206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800020e:	f000 f811 	bl	8000234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000212:	f7ff ffd9 	bl	80001c8 <main>
  bx  lr    
 8000216:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800021c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000220:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000224:	080002b8 	.word	0x080002b8
  ldr r2, =_sbss
 8000228:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800022c:	2000005c 	.word	0x2000005c

08000230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000230:	e7fe      	b.n	8000230 <ADC_IRQHandler>
	...

08000234 <__libc_init_array>:
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	4d0d      	ldr	r5, [pc, #52]	@ (800026c <__libc_init_array+0x38>)
 8000238:	4c0d      	ldr	r4, [pc, #52]	@ (8000270 <__libc_init_array+0x3c>)
 800023a:	1b64      	subs	r4, r4, r5
 800023c:	10a4      	asrs	r4, r4, #2
 800023e:	2600      	movs	r6, #0
 8000240:	42a6      	cmp	r6, r4
 8000242:	d109      	bne.n	8000258 <__libc_init_array+0x24>
 8000244:	4d0b      	ldr	r5, [pc, #44]	@ (8000274 <__libc_init_array+0x40>)
 8000246:	4c0c      	ldr	r4, [pc, #48]	@ (8000278 <__libc_init_array+0x44>)
 8000248:	f000 f826 	bl	8000298 <_init>
 800024c:	1b64      	subs	r4, r4, r5
 800024e:	10a4      	asrs	r4, r4, #2
 8000250:	2600      	movs	r6, #0
 8000252:	42a6      	cmp	r6, r4
 8000254:	d105      	bne.n	8000262 <__libc_init_array+0x2e>
 8000256:	bd70      	pop	{r4, r5, r6, pc}
 8000258:	f855 3b04 	ldr.w	r3, [r5], #4
 800025c:	4798      	blx	r3
 800025e:	3601      	adds	r6, #1
 8000260:	e7ee      	b.n	8000240 <__libc_init_array+0xc>
 8000262:	f855 3b04 	ldr.w	r3, [r5], #4
 8000266:	4798      	blx	r3
 8000268:	3601      	adds	r6, #1
 800026a:	e7f2      	b.n	8000252 <__libc_init_array+0x1e>
 800026c:	080002b0 	.word	0x080002b0
 8000270:	080002b0 	.word	0x080002b0
 8000274:	080002b0 	.word	0x080002b0
 8000278:	080002b4 	.word	0x080002b4

0800027c <memcpy>:
 800027c:	440a      	add	r2, r1
 800027e:	4291      	cmp	r1, r2
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	d100      	bne.n	8000288 <memcpy+0xc>
 8000286:	4770      	bx	lr
 8000288:	b510      	push	{r4, lr}
 800028a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800028e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000292:	4291      	cmp	r1, r2
 8000294:	d1f9      	bne.n	800028a <memcpy+0xe>
 8000296:	bd10      	pop	{r4, pc}

08000298 <_init>:
 8000298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029a:	bf00      	nop
 800029c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029e:	bc08      	pop	{r3}
 80002a0:	469e      	mov	lr, r3
 80002a2:	4770      	bx	lr

080002a4 <_fini>:
 80002a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002a6:	bf00      	nop
 80002a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002aa:	bc08      	pop	{r3}
 80002ac:	469e      	mov	lr, r3
 80002ae:	4770      	bx	lr
