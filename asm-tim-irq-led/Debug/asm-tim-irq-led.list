
asm-tim-irq-led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000190  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000318  08000320  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000318  08000318  00001320  2**0
                  CONTENTS
  4 .ARM          00000000  08000318  08000318  00001320  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000318  08000320  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000318  08000318  00001318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800031c  0800031c  0000131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001320  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000f2  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000073  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000014b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  0000150a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00001548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000008f  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  0000161f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000300 	.word	0x08000300

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000300 	.word	0x08000300

080001c8 <main>:

.text

main:

 bl rcc_config
 80001c8:	f000 f83c 	bl	8000244 <rcc_config>
 bl moder_config
 80001cc:	f000 f842 	bl	8000254 <moder_config>

 bl SysTickTimerConfig
 80001d0:	f000 f809 	bl	80001e6 <SysTickTimerConfig>

 bl EnalbeCounter
 80001d4:	f000 f821 	bl	800021a <EnalbeCounter>

 b inf_loop
 80001d8:	e028      	b.n	800022c <inf_loop>

080001da <SysTick_Handler>:


/*--------------*/
SysTick_Handler:
 push {lr}
 80001da:	b500      	push	{lr}
 bl flip_led_state
 80001dc:	f000 f827 	bl	800022e <flip_led_state>
 pop {lr}
 80001e0:	f85d eb04 	ldr.w	lr, [sp], #4

 bx lr
 80001e4:	4770      	bx	lr

080001e6 <SysTickTimerConfig>:
/*--------------*/
SysTickTimerConfig:
/* config control register */
 movw r0, :lower16:STK_CTRL_ADDR
 80001e6:	f24e 0010 	movw	r0, #57360	@ 0xe010
 movt r0, :upper16:STK_CTRL_ADDR
 80001ea:	f2ce 0000 	movt	r0, #57344	@ 0xe000
 ldr r1, [r0]
 80001ee:	6801      	ldr	r1, [r0, #0]
 //set processor clock (16Mhz by default) as source
 orr r1, 0x1 << 2
 80001f0:	f041 0104 	orr.w	r1, r1, #4
 //enable exception request
 orr r1, 0x1 << 1
 80001f4:	f041 0102 	orr.w	r1, r1, #2
 //set config
 str r1, [r0]
 80001f8:	6001      	str	r1, [r0, #0]

/* config reload register */
 movw r0, :lower16:STK_LOAD_ADDR
 80001fa:	f24e 0014 	movw	r0, #57364	@ 0xe014
 movt r0, :upper16:STK_LOAD_ADDR
 80001fe:	f2ce 0000 	movt	r0, #57344	@ 0xe000

 movw r1, :lower16:15999
 8000202:	f643 617f 	movw	r1, #15999	@ 0x3e7f
 movt r1, :upper16:15999
 8000206:	f2c0 0100 	movt	r1, #0

 movw r2, :lower16:PERIOD_BLINK_IN_MS
 800020a:	f240 0232 	movw	r2, #50	@ 0x32
 movt r2, :upper16:PERIOD_BLINK_IN_MS
 800020e:	f2c0 0200 	movt	r2, #0

 mul r1, r2
 8000212:	fb02 f101 	mul.w	r1, r2, r1
 // set reload value
 str r1, [r0]
 8000216:	6001      	str	r1, [r0, #0]

 bx lr
 8000218:	4770      	bx	lr

0800021a <EnalbeCounter>:
/*--------------*/
EnalbeCounter:
 movw r0, :lower16:STK_CTRL_ADDR
 800021a:	f24e 0010 	movw	r0, #57360	@ 0xe010
 movt r0, :upper16:STK_CTRL_ADDR
 800021e:	f2ce 0000 	movt	r0, #57344	@ 0xe000
 ldr r1, [r0]
 8000222:	6801      	ldr	r1, [r0, #0]
 //enable counter
 orr r1, 0x1
 8000224:	f041 0101 	orr.w	r1, r1, #1
 str r1, [r0]
 8000228:	6001      	str	r1, [r0, #0]

 bx lr
 800022a:	4770      	bx	lr

0800022c <inf_loop>:
/*--------------*/
inf_loop:
 b inf_loop
 800022c:	e7fe      	b.n	800022c <inf_loop>

0800022e <flip_led_state>:
/*--------------*/
flip_led_state:
 movw r0, :lower16:GPIOD_ODR_ADDR
 800022e:	f640 4014 	movw	r0, #3092	@ 0xc14
 movt r0, :upper16:GPIOD_ODR_ADDR
 8000232:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 ldr r1, [r0]
 8000236:	6801      	ldr	r1, [r0, #0]
 mov r2, 0x1 << 12
 8000238:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 eor r1, r2
 800023c:	ea81 0102 	eor.w	r1, r1, r2

 str r1, [r0]
 8000240:	6001      	str	r1, [r0, #0]
 bx lr
 8000242:	4770      	bx	lr

08000244 <rcc_config>:
/*--------------*/
rcc_config:
 movw r0, :lower16:RCC_AHB1ENR_ADDR
 8000244:	f643 0030 	movw	r0, #14384	@ 0x3830
 movt r0, :upper16:RCC_AHB1ENR_ADDR
 8000248:	f2c4 0002 	movt	r0, #16386	@ 0x4002

 movw r1, :lower16:GPIOD_CLK_EN
 800024c:	f240 0108 	movw	r1, #8

 str r1, [r0]
 8000250:	6001      	str	r1, [r0, #0]
 bx lr
 8000252:	4770      	bx	lr

08000254 <moder_config>:
/*--------------*/
moder_config:
 movw r0, :lower16:GPIOD_MODER_ADDR
 8000254:	f640 4000 	movw	r0, #3072	@ 0xc00
 movt r0, :upper16:GPIOD_MODER_ADDR
 8000258:	f2c4 0002 	movt	r0, #16386	@ 0x4002

 movw r1, :lower16:GPIOD_MODER_12_OUTPUT_MODE
 800025c:	f240 0100 	movw	r1, #0
 movt r1, :upper16:GPIOD_MODER_12_OUTPUT_MODE
 8000260:	f2c0 1100 	movt	r1, #256	@ 0x100

 str r1, [r0]
 8000264:	6001      	str	r1, [r0, #0]
 bx lr
 8000266:	4770      	bx	lr

08000268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000268:	f8df d030 	ldr.w	sp, [pc, #48]	@ 800029c <LoopFillZerobss+0xe>
  

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	@ (80002a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	@ (80002a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	@ (80002a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	@ (80002ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	@ (80002b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000292:	f000 f811 	bl	80002b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000296:	f7ff ff97 	bl	80001c8 <main>
  bx  lr    
 800029a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800029c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a8:	08000320 	.word	0x08000320
  ldr r2, =_sbss
 80002ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC_IRQHandler>
	...

080002b8 <__libc_init_array>:
 80002b8:	b570      	push	{r4, r5, r6, lr}
 80002ba:	4d0d      	ldr	r5, [pc, #52]	@ (80002f0 <__libc_init_array+0x38>)
 80002bc:	4c0d      	ldr	r4, [pc, #52]	@ (80002f4 <__libc_init_array+0x3c>)
 80002be:	1b64      	subs	r4, r4, r5
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	2600      	movs	r6, #0
 80002c4:	42a6      	cmp	r6, r4
 80002c6:	d109      	bne.n	80002dc <__libc_init_array+0x24>
 80002c8:	4d0b      	ldr	r5, [pc, #44]	@ (80002f8 <__libc_init_array+0x40>)
 80002ca:	4c0c      	ldr	r4, [pc, #48]	@ (80002fc <__libc_init_array+0x44>)
 80002cc:	f000 f818 	bl	8000300 <_init>
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	2600      	movs	r6, #0
 80002d6:	42a6      	cmp	r6, r4
 80002d8:	d105      	bne.n	80002e6 <__libc_init_array+0x2e>
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e0:	4798      	blx	r3
 80002e2:	3601      	adds	r6, #1
 80002e4:	e7ee      	b.n	80002c4 <__libc_init_array+0xc>
 80002e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ea:	4798      	blx	r3
 80002ec:	3601      	adds	r6, #1
 80002ee:	e7f2      	b.n	80002d6 <__libc_init_array+0x1e>
 80002f0:	08000318 	.word	0x08000318
 80002f4:	08000318 	.word	0x08000318
 80002f8:	08000318 	.word	0x08000318
 80002fc:	0800031c 	.word	0x0800031c

08000300 <_init>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

0800030c <_fini>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr
