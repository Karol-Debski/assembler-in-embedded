
asm-led-blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000170  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f8  08000300  00001300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f8  080002f8  00001300  2**0
                  CONTENTS
  4 .ARM          00000000  080002f8  080002f8  00001300  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f8  08000300  00001300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f8  080002f8  000012f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002fc  080002fc  000012fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001300  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000e7  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000071  00000000  00000000  00001417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000014dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00001518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000008d  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000015ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080002e0 	.word	0x080002e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080002e0 	.word	0x080002e0

080001c8 <main>:

.text

main:

 bl rcc_config
 80001c8:	f000 f82c 	bl	8000224 <rcc_config>
 bl moder_config
 80001cc:	f000 f832 	bl	8000234 <moder_config>

 bl inf_blink_led
 80001d0:	f000 f800 	bl	80001d4 <inf_blink_led>

080001d4 <inf_blink_led>:

/*--------------*/
inf_blink_led:
 bl set_led_on
 80001d4:	f000 f812 	bl	80001fc <set_led_on>
 mov r0, 1
 80001d8:	f04f 0001 	mov.w	r0, #1
 bl wait
 80001dc:	f000 f807 	bl	80001ee <wait>
 bl set_led_off
 80001e0:	f000 f816 	bl	8000210 <set_led_off>
 mov r0, 1
 80001e4:	f04f 0001 	mov.w	r0, #1
 bl wait
 80001e8:	f000 f801 	bl	80001ee <wait>
 b inf_blink_led
 80001ec:	e7f2      	b.n	80001d4 <inf_blink_led>

080001ee <wait>:
/*--------------*/
wait:
 cmp r0, (0x1B << 16 + 0x1B)
 80001ee:	f1b0 1f1b 	cmp.w	r0, #1769499	@ 0x1b001b
 add r0, 1
 80001f2:	f100 0001 	add.w	r0, r0, #1
 nop
 80001f6:	bf00      	nop
 bne wait
 80001f8:	d1f9      	bne.n	80001ee <wait>
 bx lr
 80001fa:	4770      	bx	lr

080001fc <set_led_on>:
/*--------------*/
set_led_on:
 movw r0, :lower16:GPIOD_BSRR_ADDR
 80001fc:	f640 4018 	movw	r0, #3096	@ 0xc18
 movt r0, :upper16:GPIOD_BSRR_ADDR
 8000200:	f2c4 0002 	movt	r0, #16386	@ 0x4002

 movw r1, :lower16:GPIOD_BSRR_12_ON
 8000204:	f241 0100 	movw	r1, #4096	@ 0x1000
 movt r1, 0
 8000208:	f2c0 0100 	movt	r1, #0

 str r1, [r0]
 800020c:	6001      	str	r1, [r0, #0]
 bx lr
 800020e:	4770      	bx	lr

08000210 <set_led_off>:
/*--------------*/
set_led_off:
 movw r0, :lower16:GPIOD_BSRR_ADDR
 8000210:	f640 4018 	movw	r0, #3096	@ 0xc18
 movt r0, :upper16:GPIOD_BSRR_ADDR
 8000214:	f2c4 0002 	movt	r0, #16386	@ 0x4002

 movw r1, 0
 8000218:	f240 0100 	movw	r1, #0
 movt r1, :upper16:GPIOD_BSRR_12_OFF
 800021c:	f2c1 0100 	movt	r1, #4096	@ 0x1000

 str r1, [r0]
 8000220:	6001      	str	r1, [r0, #0]
 bx lr
 8000222:	4770      	bx	lr

08000224 <rcc_config>:
/*--------------*/
rcc_config:
 movw r0, :lower16:RCC_AHB1ENR_ADDR
 8000224:	f643 0030 	movw	r0, #14384	@ 0x3830
 movt r0, :upper16:RCC_AHB1ENR_ADDR
 8000228:	f2c4 0002 	movt	r0, #16386	@ 0x4002

 movw r1, :lower16:GPIOD_CLK_EN
 800022c:	f240 0108 	movw	r1, #8

 str r1, [r0]
 8000230:	6001      	str	r1, [r0, #0]
 bx lr
 8000232:	4770      	bx	lr

08000234 <moder_config>:
/*--------------*/
moder_config:
 movw r0, :lower16:GPIOD_MODER_ADDR
 8000234:	f640 4000 	movw	r0, #3072	@ 0xc00
 movt r0, :upper16:GPIOD_MODER_ADDR
 8000238:	f2c4 0002 	movt	r0, #16386	@ 0x4002

 movw r1, :lower16:GPIOD_MODER_12_OUTPUT_MODE
 800023c:	f240 0100 	movw	r1, #0
 movt r1, :upper16:GPIOD_MODER_12_OUTPUT_MODE
 8000240:	f2c0 1100 	movt	r1, #256	@ 0x100

 str r1, [r0]
 8000244:	6001      	str	r1, [r0, #0]
 bx lr
 8000246:	4770      	bx	lr

08000248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000248:	f8df d030 	ldr.w	sp, [pc, #48]	@ 800027c <LoopFillZerobss+0xe>
  

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	@ (8000280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	@ (8000284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	@ (8000290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000272:	f000 f811 	bl	8000298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000276:	f7ff ffa7 	bl	80001c8 <main>
  bx  lr    
 800027a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800027c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	08000300 	.word	0x08000300
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	2000001c 	.word	0x2000001c

08000294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC_IRQHandler>
	...

08000298 <__libc_init_array>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	4d0d      	ldr	r5, [pc, #52]	@ (80002d0 <__libc_init_array+0x38>)
 800029c:	4c0d      	ldr	r4, [pc, #52]	@ (80002d4 <__libc_init_array+0x3c>)
 800029e:	1b64      	subs	r4, r4, r5
 80002a0:	10a4      	asrs	r4, r4, #2
 80002a2:	2600      	movs	r6, #0
 80002a4:	42a6      	cmp	r6, r4
 80002a6:	d109      	bne.n	80002bc <__libc_init_array+0x24>
 80002a8:	4d0b      	ldr	r5, [pc, #44]	@ (80002d8 <__libc_init_array+0x40>)
 80002aa:	4c0c      	ldr	r4, [pc, #48]	@ (80002dc <__libc_init_array+0x44>)
 80002ac:	f000 f818 	bl	80002e0 <_init>
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	10a4      	asrs	r4, r4, #2
 80002b4:	2600      	movs	r6, #0
 80002b6:	42a6      	cmp	r6, r4
 80002b8:	d105      	bne.n	80002c6 <__libc_init_array+0x2e>
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c0:	4798      	blx	r3
 80002c2:	3601      	adds	r6, #1
 80002c4:	e7ee      	b.n	80002a4 <__libc_init_array+0xc>
 80002c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ca:	4798      	blx	r3
 80002cc:	3601      	adds	r6, #1
 80002ce:	e7f2      	b.n	80002b6 <__libc_init_array+0x1e>
 80002d0:	080002f8 	.word	0x080002f8
 80002d4:	080002f8 	.word	0x080002f8
 80002d8:	080002f8 	.word	0x080002f8
 80002dc:	080002fc 	.word	0x080002fc

080002e0 <_init>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr

080002ec <_fini>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr
